#! /usr/bin/perl

# Read a signed 16-bit stream and return RMS values every 4096 elements

chomp ($progName = `basename $0`);
$sampleSize=4096;
$normVal=280;
$absMax=2**15;
$flipOut = 0;

sub usage() {
    print <<DUH

    $progName [-s sampleSize] [-n normalizedValue] [-f]

    Takes a signed 16-bit STDIN stream (little endian) and returns RMS
    values to STDOUT.  -f will flip the resulting output.

    Defaults:
                sampleSize = $sampleSize
                nomalizedValue = $normVal

DUH
;
exit;
}

# Dumb argument parsing
while ( $#ARGV >= 0  ) {
    if ( $ARGV[0] =~ /-s/ ) {
        shift @ARGV;
        $ARGV[0] =~ /^\d+$/ or usage();
        $sampleSize = $ARGV[0] ;
        shift @ARGV;
    } elsif ( $ARGV[0] =~ /-n/ ) {
        shift @ARGV;
        $ARGV[0] =~ /^\d+$/ or usage();
        $normVal = $ARGV[0] ;
        shift @ARGV;
    } elsif ( $ARGV[0] =~ /-f/ ) {
        $flipOut = 1;
        shift @ARGV;
    } else {
        usage();
    }
}


$| = 1; # Unbuffered STDOUT

while ( <STDIN> ) {

    $level = 0;

    for ($i = 0; $i < $sampleSize; $i++ ) {

        $ret = sysread (STDIN, $element, 2);

        if ($ret = 0) { #EOF
        }

        $s16 = unpack("s", $element);
        $level += $s16**2;
    }
    $output = int( ($normVal/$absMax) * ($level / $sampleSize) ** .5);
    if ( $flipOut ) {
        $output = $normVal - $output;
    }
    syswrite(STDOUT, $output . "\n" );

}
