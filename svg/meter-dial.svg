<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>

<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<!--
    Dial meter which can take input values (0-100) from an outside function.
    * Author: David A. Gent
    * v1.0 complete 8 August 2012

-->

<svg xmlns="http://www.w3.org/2000/svg" version="1.1"
     xmlns:xlink="http://www.w3.org/1999/xlink"
    height="300px" width="300px"
    viewBox="-300 -300 600 600"
    onload='startup(evt);'>

    <script type="text/javascript" xlink:href="BBox-tools.js" />

    <script> <![CDATA[

        // svgDoc can be used in internal javascript functions
        var svgDoc;
        var interactive_element;
        var textXY;
        var offset; 
        var radian_to_degree = 180/Math.PI;   
        var dialElement;
        function startup(evt){
            svgDoc=evt.target.ownerDocument;
            // Use below to export an svg function to an outside
            // (webpage/html) name where it can be called
            //parent.outsideCaller = oFunction;
            parent.svgMeters.updatefunc.push(updateMeter);
            textXY = svgDoc.getElementById("textXY");
            textXY.textContent = "WHY!!!!";
            interactive_element = svgDoc.getElementById("Background1");
            offset = getCenterOffset(interactive_element);
            interactive_element = 0;
            dialElement = svgDoc.getElementById("Dial1");
        }

        // This function can be seen from html
        //function oFunction() {}

        // updateMeter accepts values of 0-100
        function updateMeter(newval) {
            var text_suffix = "";
            if (newval > 100) {
                newval = 100;
                text_suffix = "!!!";
            }
            textXY.textContent = newval + text_suffix;
            // theta has a range of 120-420, or 300, so multiply newval
            // by 3 and add 120
            var theta = (newval * 3) + 120;
            transform = "rotate(" + theta +  ", 0, 0)" ;
            dialElement.setAttributeNS(null, "transform", transform);
        }


        //This function could call an outside function and pass foo
        // function callOutside(foo) {top.outsideFunction(foo) }

        // Callback function to rotate dial from mouse event
        function rotateDial(evt) {
            if(interactive_element != 0) {
                // Subtract mouse event coords from width/2
                var mouse_x =  evt.clientX - offset.x;
                var mouse_y =  evt.clientY - offset.y;

                //Find angle to mouse in degrees 
                theta = Math.atan2(mouse_y, mouse_x )*radian_to_degree;
                if ( theta < 120 && theta > 60 ) { return } 
                transform = "rotate(" + theta +  ", 0, 0)" ;
                interactive_element.setAttributeNS(null, "transform", transform);
                textXY.textContent = "X: " + mouse_x + " Y: " + mouse_y + " theta: " + theta;
            }
        }

        function makeInteractive() {
            interactive_element = svgDoc.getElementById("Dial1");
        }

        function unmakeInteractive() {
            interactive_element = 0;
        }


    ]]>
    </script>


    <!-- This is a rotary dial gauge. -->
    <defs>
        <!-- This is a dial. the first tick mark is at 30 degrees, and the 
            last at 330. -->
        <!-- This is used to locate and scale the entire assembly. -->
        <g id="MB_DialGaugeBackground" onmousemove="rotateDial(evt)"
            onmousedown="makeInteractive(); rotateDial(evt)" onmouseup="unmakeInteractive()">
        
            <!-- This adds the outer ring. -->
            <circle cx="0px" cy="0px" r="275px" fill="silver" stroke="black" 
                stroke-width="5px"/>
            <!-- This adds the outer part of the dial background. -->
            <circle cx="0px" cy="0px" r="250px" stroke="black" 
                stroke-width="5px"/>
            <!-- These add the "tick" marks to the dial. -->
            <g stroke="white" stroke-width="10px">
                <line x1="0" y1="-250" x2="0" y2="0"/>
                <line x1="0" y1="-250" x2="0" y2="250" transform="rotate(30)"/>
                <line x1="0" y1="-250" x2="0" y2="250" transform="rotate(60)"/>
                <line x1="0" y1="-250" x2="0" y2="250" transform="rotate(90)"/>
                <line x1="0" y1="-250" x2="0" y2="250" transform="rotate(120)"/>
                <line x1="0" y1="-250" x2="0" y2="250" transform="rotate(150)"/>
            </g>
            <!-- This covers the inner part of the "tick" marks and provides 
                most of the dial background. -->
            <circle  cx="0px" cy="0px" r="225px" stroke="none" 
                stroke-width="0px"/>
        
        </g>
        
        
            <!-- This is the actual pointer which we rotate. -->
        <g id="MB_DialGaugePointer" onmousemove="rotateDial(evt)"
            onmousedown="makeInteractive()" onmouseup="unmakeInteractive()" 
            >

            <!-- This is the centre part of the pointer. -->
            <circle cx="0px" cy="0px" r="25px" stroke="black" 
                stroke-width="2px"/>
            <circle cx="0px" cy="0px" r="5px" fill="black" stroke="black" 
                stroke-width="2px"/>
            <!-- This is the pointer. -->
            <polygon stroke="black" stroke-width="2px" 
                    points="0,25 200,3 200,-3 0,-25 25,0" />
            <line x1="25" y1="0" x2="200" y2="0" stroke="black" stroke-width="2px"/>
        </g>

    </defs>

	<!-- This is a dial.  -->
	<g>
		<g id="Background1" fill="blue">
			<use xlink:href="#MB_DialGaugeBackground"/>
		</g>
	
		<g id="Dial1" fill="yellow"
            >
			<use xlink:href="#MB_DialGaugePointer"
            />
		</g>

        <text id="textXY" x="0" y="200" fill="white" text-anchor="middle"
            style="font-size:24px; font-weight:bold;">Hey!</text>

	
	</g>

</svg>

